<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apis on Fatina</title>
    <link>https://kefniark.github.io/Fatina/api/</link>
    <description>Recent content in Apis on Fatina</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Oct 2019 13:06:37 +0900</lastBuildDate>
    
	<atom:link href="https://kefniark.github.io/Fatina/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fatina API</title>
      <link>https://kefniark.github.io/Fatina/api/basic/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/basic/</guid>
      <description>Fatina Tween Sequence Transition  Fatina Init The first time you create a tween, Fatina will initialize itself automatically, using default values. If instead you prefer to initialize it yourself (recommended), call the method .init() once, BEFORE creating any tween (calling it afterwards will have no effect). Controls  pause() / resume(): void setTimescale(scale: number): void  Methods  init(): void This method has to be called once to initialize Fatina update(dt: number): void tween(obj): Tween Method used to create new tween transition(obj): Transition Method used to create new transition sequence(): Sequence Method used to create new sequence pulse(obj, settings): ISequence Pulse preset scale(obj, settings): ISequence Scale preset wobble(obj, settings): ISequence Wobble preset sonar(obj, settings): ISequence Sonar preset shake(obj, settings): ISequence Shake preset delay(duration) Delay setTimeout(fn, duration): void This is just a simple helper around Fatina.</description>
    </item>
    
    <item>
      <title>Tween API</title>
      <link>https://kefniark.github.io/Fatina/api/tween/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/tween/</guid>
      <description>Fatina Tween Sequence Transition   A Tween that takes control of values and animates them.
 Methods  from(from: any): Tween; to(to: any, duration: number): Tween; modify(force: any, updateTo: boolean): void; setLoop(loop: number): Tween; setRelative(relative: boolean): Tween; setEasing(type: EasingType | string): Tween; setTimescale(scale: number): Tween; setSteps(steps: number): Tween; yoyo(times: number): Tween; reverse(): void; toSequence(): Sequence;  See More    var obj = { x: 0 }; // A normal Tween Fatina.</description>
    </item>
    
    <item>
      <title>Sequence API</title>
      <link>https://kefniark.github.io/Fatina/api/sequence/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/sequence/</guid>
      <description>Fatina Tween Sequence Transition   A Sequence is special tween that, instead of taking control of a value, takes control of other tweens and animates them as a group.
 Methods  setTimescale(scale: number): Sequence setLoop(loop: number): Sequence append(tween: ITween | ISequence): Sequence Adds the given tween to the end of the Sequence. appendCallback(cb: () =&amp;gt; void): Sequence appendInterval(duration: number): Sequence prepend(tween: ITween| ISequence): Sequence Adds the given tween to the beginning of the Sequence, pushing forward in time the rest of the contents.</description>
    </item>
    
    <item>
      <title>Transition API</title>
      <link>https://kefniark.github.io/Fatina/api/transition/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/transition/</guid>
      <description>Fatina Tween Sequence Transition   A Transition is a helper around tween to make their usage easier and less verbose for GUI or Webapps.
It take care of most anoying parts automatically (defaults, creating tweens, avoiding duplicates, autostart, cleaning old tweens), and expose tween into a more code friendly async/await way.
 Methods  to(to: any, duration: number): Tween; toSpeed(to: any, speed: number): Tween; delay(duration: number): Tween promiseTo(to: any, duration: number): Promise&amp;lt;Tween&amp;gt;; promiseToSpeed(to: any, speed: number): Promise&amp;lt;Tween&amp;gt;; promiseDelay(duration: number): Promise&amp;lt;Tween&amp;gt; kill(): void;  See More    // Your object const obj = { name: &#39;sprite&#39;, x: 0, y: 0 } // Create a reusable transition around this object, so you dont have to keep a reference to the object everywhere const transition = Fatina.</description>
    </item>
    
  </channel>
</rss>