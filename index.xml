<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fatina</title>
    <link>https://kefniark.github.io/Fatina/</link>
    <description>Recent content on Fatina</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Oct 2019 13:06:37 +0900</lastBuildDate>
    
	<atom:link href="https://kefniark.github.io/Fatina/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basics Samples</title>
      <link>https://kefniark.github.io/Fatina/samples/generic/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/generic/</guid>
      <description>.imgTest { position: relative; margin: 0; } hr { border-top: 1px dashed #8c8b8b; border-bottom: 1px dashed #fff; margin-top: 25px !important; clear: both; }   The following example are moving html elements but you can tween almost any kind of object and data. PlayAll 
Linear tween  function sample1() { var elem = document.getElementById(&#34;sample1&#34;); var obj = { x: 0, y: 0 }; Fatina.tween(obj) .from({x: 0}) .to({x: 500}, 2500) .</description>
    </item>
    
    <item>
      <title>Games Samples</title>
      <link>https://kefniark.github.io/Fatina/samples/game/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/game/</guid>
      <description>Few examples of Fatina working with Pixi.js (HTML 5 2D rendering engine).  Those are just samples, not real games :P Thanks Unity-chan for her help 
Unity Chan GO!!! Parallax   document.addEventListener(&#39;DOMContentLoaded&#39;, () = { var app = new PIXI.Application(1024 / 2, 768 / 2, {backgroundColor : 0x1099bb}); document.getElementById(&#39;canvas1&#39;).appendChild(app.view); // Create background with parallax CreateBackgrounds(); // Create unity chan let textures = LoadUnityChanTextures(); var unitychan = new PIXI.</description>
    </item>
    
    <item>
      <title>Presets</title>
      <link>https://kefniark.github.io/Fatina/samples/presets/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/presets/</guid>
      <description>Fatina provide few preset for usual effects. These effect are just sequence with a bit of math. They are not really new features but just helpers, and up to you to implement more of them for your own project.       let bunny1; let bunny2; let t1; let t2; function init() { Fatina.init(); // The application will create a renderer using WebGL, if possible, // with a fallback to a canvas render.</description>
    </item>
    
    <item>
      <title>Benchmark</title>
      <link>https://kefniark.github.io/Fatina/basics/benchmark/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/basics/benchmark/</guid>
      <description>Tween counter: ~0k  Run All What is happening here: Bellow, 5 scenario are tested over different configuration / libraries:  1. Normal usage : 200 tween over 100 frames x 50 times 2. Long duration usage : 1000 tween over 500 frames x 100 times (to test long term usage and GC) 3. Medium usage : 2k tween over 200 frames x 5 times 4. Heavy usage : 5k tween over 200 frames x 5 times 5.</description>
    </item>
    
    <item>
      <title>Fatina API</title>
      <link>https://kefniark.github.io/Fatina/api/basic/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/basic/</guid>
      <description>Fatina Tween Sequence Transition  Fatina Init The first time you create a tween, Fatina will initialize itself automatically, using default values. If instead you prefer to initialize it yourself (recommended), call the method .init() once, BEFORE creating any tween (calling it afterwards will have no effect). Controls  pause() / resume(): void setTimescale(scale: number): void  Methods  init(): void This method has to be called once to initialize Fatina update(dt: number): void tween(obj): Tween Method used to create new tween transition(obj): Transition Method used to create new transition sequence(): Sequence Method used to create new sequence pulse(obj, settings): ISequence Pulse preset scale(obj, settings): ISequence Scale preset wobble(obj, settings): ISequence Wobble preset sonar(obj, settings): ISequence Sonar preset shake(obj, settings): ISequence Shake preset delay(duration) Delay setTimeout(fn, duration): void This is just a simple helper around Fatina.</description>
    </item>
    
    <item>
      <title>Advanced Samples</title>
      <link>https://kefniark.github.io/Fatina/samples/advanced/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/advanced/</guid>
      <description>Few examples of Fatina working with Pixi.js (HTML 5 2D rendering engine)
Demonic Star Looping Sequence   document.addEventListener(&#39;DOMContentLoaded&#39;, () = { var app = new PIXI.Application(1024 / 2, 768 / 2, {backgroundColor : 0x000000}); document.getElementById(&#39;canvas2&#39;).appendChild(app.view); var star = new PIXI.Container(); star.x += 100; star.y += 50; app.stage.addChild(star); // Create 250 sprites for (let i = 0; i A demonic star with 250 moving sprites along a defined path</description>
    </item>
    
    <item>
      <title>Helpers Plugin</title>
      <link>https://kefniark.github.io/Fatina/plugins/helpers/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/helpers/</guid>
      <description>Description This plugin is a set of helpers to provide a better integration of Fatina with javascript games library like PixiJs or Phaser. It provides helpers to animate:
 Position: Move, Shake, PunchPosition Rotation: Rotate, PunchRotate Scale: Scale, PunchScale Alpha: Fade Color: Color, PunchColor  This make the code smaller and easier to read
// normal fatina tween Fatina.tween(sprite.position, [&#39;x&#39;]).to({&#39;x&#39;: 50 }, 1000); // same operation with the helper sprite.</description>
    </item>
    
    <item>
      <title>Helpers Plugin - API</title>
      <link>https://kefniark.github.io/Fatina/plugins/helpers-api/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/helpers-api/</guid>
      <description>Helpers Getting Started API  Position Following methods use .position.x and .position.y
 moveTo(x: number, y: number, duration: number): Move to an absolute position moveXTo(x: number, duration: number) moveYTo(y: number, duration: number) moveToRel(x: number, y: number, duration: number): Move to a relative position moveXToRel(x: number, duration: number) moveYToRel(y: number, duration: number) punchPosition(x: number, y: number, duration: number, iteration: number): Oscillate around the current position shake(x: number, y: number, duration: number, iteration: number): Shake around the current position  Rotation Following methods use .</description>
    </item>
    
    <item>
      <title>Helpers Plugin - Getting Started</title>
      <link>https://kefniark.github.io/Fatina/plugins/helpers-usage/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/helpers-usage/</guid>
      <description>Helpers Getting Started API  The installation process is explained in the README.
After setup, you can use this plugin on any object:
Fatina.plugin.addHelpers(obj);  1. Example (with Phaser) // require fatina let fatina = require(&#39;fatina&#39;).default; let fatinaHelpers = require(&#39;fatina-plugin-helpers&#39;); // initialize fatina fatina.init(); fatina.loadPlugin(fatinaHelpers.get()); ... // let&#39;s create a phaser sprite var test = new Phaser.Sprite(this.game, 2, 80, &#39;hudBg&#39;); // use the plugin on this sprite fatina.plugin.addHelpers(test); // use one helper function to move horizontaly the sprite to the position x = 50 in 1s.</description>
    </item>
    
    <item>
      <title>Tween API</title>
      <link>https://kefniark.github.io/Fatina/api/tween/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/tween/</guid>
      <description>Fatina Tween Sequence Transition   A Tween that takes control of values and animates them.
 Methods  from(from: any): Tween; to(to: any, duration: number): Tween; modify(force: any, updateTo: boolean): void; setLoop(loop: number): Tween; setRelative(relative: boolean): Tween; setEasing(type: EasingType | string): Tween; setTimescale(scale: number): Tween; setSteps(steps: number): Tween; yoyo(times: number): Tween; reverse(): void; toSequence(): Sequence;  See More    var obj = { x: 0 }; // A normal Tween Fatina.</description>
    </item>
    
    <item>
      <title>Animator Plugin</title>
      <link>https://kefniark.github.io/Fatina/plugins/animator/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/animator/</guid>
      <description>Description This plugin was designed to provide an easy way to write game animations with Fatina.
It was design to solve few common issues related to game animations:
 Reusability: Animations can be shared by completely different object (fadeIn, gravity, &amp;hellip;) Easy to use: The main function is just obj.Animator.Play(&#39;animationName&#39;); Performance: Animations by default are reusable tweens, it means less instantiation at runtime and less memory usage Animation State: Each animation group is a state machine, starting a new animation will stop the previous one automatically  Github Download NPM Getting Started API  Demo - UnityChan Animator   Fatina Sample          =   &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;   =   FadeIn FadeOut Jump Pause Resume x4 x1 x0.</description>
    </item>
    
    <item>
      <title>Animator Plugin - API</title>
      <link>https://kefniark.github.io/Fatina/plugins/animator-api/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/animator-api/</guid>
      <description>Animator Getting Started API  AnimatorManager  animations: string[] names of registered animations labels: string[] register(name: string, onCreate: (object: any, params?: any) =&amp;gt; IControl, label?: string): AnimatorManager; addAnimatorTo(obj: any): Animator;  TickerManager  get(name: string): ITicker; pauseAll(name: string): void; resumeAll(name: string): void; killAll(name: string): void;  Animator Animator component added to object you want to animate. This keep track of your animations and manage their states for you.
Animations  addAnimation(name: string, animationName: string, options?</description>
    </item>
    
    <item>
      <title>Animator Plugin - Getting Started</title>
      <link>https://kefniark.github.io/Fatina/plugins/animator-usage/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/animator-usage/</guid>
      <description>Animator Getting Started API  The installation process is explained in the README.
After setup, you can use this plugin:
// Global animator manager Fatina.plugin.animatorManager; // Global tick manager to be able to pause / resume group of objects Fatina.plugin.tickerManager; // Add a Animator component to any object Fatina.plugin.animatorManager.addAnimatorTo(object);  
Import &amp;amp; Initialize // require fatina let fatina = require(&#39;fatina&#39;).default; let fatinaAnimator = require(&#39;fatina-plugin-animator&#39;); // initialize fatina fatina.init(); fatina.</description>
    </item>
    
    <item>
      <title>Sequence API</title>
      <link>https://kefniark.github.io/Fatina/api/sequence/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/sequence/</guid>
      <description>Fatina Tween Sequence Transition   A Sequence is special tween that, instead of taking control of a value, takes control of other tweens and animates them as a group.
 Methods  setTimescale(scale: number): Sequence setLoop(loop: number): Sequence append(tween: ITween | ISequence): Sequence Adds the given tween to the end of the Sequence. appendCallback(cb: () =&amp;gt; void): Sequence appendInterval(duration: number): Sequence prepend(tween: ITween| ISequence): Sequence Adds the given tween to the beginning of the Sequence, pushing forward in time the rest of the contents.</description>
    </item>
    
    <item>
      <title>Transition API</title>
      <link>https://kefniark.github.io/Fatina/api/transition/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/api/transition/</guid>
      <description>Fatina Tween Sequence Transition   A Transition is a helper around tween to make their usage easier and less verbose for GUI or Webapps.
It take care of most anoying parts automatically (defaults, creating tweens, avoiding duplicates, autostart, cleaning old tweens), and expose tween into a more code friendly async/await way.
 Methods  to(to: any, duration: number): Tween; toSpeed(to: any, speed: number): Tween; delay(duration: number): Tween promiseTo(to: any, duration: number): Promise&amp;lt;Tween&amp;gt;; promiseToSpeed(to: any, speed: number): Promise&amp;lt;Tween&amp;gt;; promiseDelay(duration: number): Promise&amp;lt;Tween&amp;gt; kill(): void;  See More    // Your object const obj = { name: &#39;sprite&#39;, x: 0, y: 0 } // Create a reusable transition around this object, so you dont have to keep a reference to the object everywhere const transition = Fatina.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://kefniark.github.io/Fatina/basics/download/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/basics/download/</guid>
      <description>1. Manual Installation Download the library and include it in your code:
&amp;lt;script src=&amp;quot;fatina.esm.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  
1 bis. NPM Installation More advanced users might want to use npm
npm install fatina  Then include the Fatina module :
// standard import with typescript import Fatina from &#39;fatina&#39; // OR standard node.js require const Fatina = require(&#39;fatina&#39;) // OR Deno import Fatina from &#39;https://cdn.skypack.dev/fatina&#39;  2. Done ! Now you can use Fatina properly :</description>
    </item>
    
    <item>
      <title>About Fatina</title>
      <link>https://kefniark.github.io/Fatina/basics/about/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/basics/about/</guid>
      <description>Special thanks to  Unity-chan for all those sprites, thanks to her I was able to make cute samples &amp;hellip; Tina.js who made me rage so much with all those nasty bugs everywhere  Why this name ?  Fat Tina: Because everyone knows typescript is fat, heavy and slow Reference to Fatina from Tower of Druaga    License MIT License A short and simple permissive licence with conditions only requiring preservation of copyright and licence notices.</description>
    </item>
    
    <item>
      <title>Tips</title>
      <link>https://kefniark.github.io/Fatina/basics/tips/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/basics/tips/</guid>
      <description>How to write tweens ?  Keep them simple: a Tween should do only one thing (avoid nesting and complexity) Split them in smaller tween to have more control (like splitting a x and y movement in two separated tweens) Group them in Sequence and prefer using .append() and .join() When you destroy an object like a sprite, Try to clean tweens related Avoid SetTimeout() and prefer Fatina.setTimeout(): All the objects/events should be ticked together, normal settimeout cannot be paused &amp;hellip;  How to go farther ?</description>
    </item>
    
  </channel>
</rss>