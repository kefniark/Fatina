<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Samples on Fatina</title>
    <link>https://kefniark.github.io/Fatina/samples/</link>
    <description>Recent content in Samples on Fatina</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Oct 2019 13:06:37 +0900</lastBuildDate>
    
	<atom:link href="https://kefniark.github.io/Fatina/samples/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basics Samples</title>
      <link>https://kefniark.github.io/Fatina/samples/generic/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/generic/</guid>
      <description>.imgTest { position: relative; margin: 0; } hr { border-top: 1px dashed #8c8b8b; border-bottom: 1px dashed #fff; margin-top: 25px !important; clear: both; }   The following example are moving html elements but you can tween almost any kind of object and data. PlayAll 
Linear tween  function sample1() { var elem = document.getElementById(&#34;sample1&#34;); var obj = { x: 0, y: 0 }; Fatina.tween(obj) .from({x: 0}) .to({x: 500}, 2500) .</description>
    </item>
    
    <item>
      <title>Games Samples</title>
      <link>https://kefniark.github.io/Fatina/samples/game/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/game/</guid>
      <description>Few examples of Fatina working with Pixi.js (HTML 5 2D rendering engine).  Those are just samples, not real games :P Thanks Unity-chan for her help 
Unity Chan GO!!! Parallax   document.addEventListener(&#39;DOMContentLoaded&#39;, () = { var app = new PIXI.Application(1024 / 2, 768 / 2, {backgroundColor : 0x1099bb}); document.getElementById(&#39;canvas1&#39;).appendChild(app.view); // Create background with parallax CreateBackgrounds(); // Create unity chan let textures = LoadUnityChanTextures(); var unitychan = new PIXI.</description>
    </item>
    
    <item>
      <title>Presets</title>
      <link>https://kefniark.github.io/Fatina/samples/presets/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/presets/</guid>
      <description>Fatina provide few preset for usual effects. These effect are just sequence with a bit of math. They are not really new features but just helpers, and up to you to implement more of them for your own project.       let bunny1; let bunny2; let t1; let t2; function init() { Fatina.init(); // The application will create a renderer using WebGL, if possible, // with a fallback to a canvas render.</description>
    </item>
    
    <item>
      <title>Advanced Samples</title>
      <link>https://kefniark.github.io/Fatina/samples/advanced/</link>
      <pubDate>Tue, 01 Oct 2019 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/samples/advanced/</guid>
      <description>Few examples of Fatina working with Pixi.js (HTML 5 2D rendering engine)
Demonic Star Looping Sequence   document.addEventListener(&#39;DOMContentLoaded&#39;, () = { var app = new PIXI.Application(1024 / 2, 768 / 2, {backgroundColor : 0x000000}); document.getElementById(&#39;canvas2&#39;).appendChild(app.view); var star = new PIXI.Container(); star.x += 100; star.y += 50; app.stage.addChild(star); // Create 250 sprites for (let i = 0; i A demonic star with 250 moving sprites along a defined path</description>
    </item>
    
  </channel>
</rss>